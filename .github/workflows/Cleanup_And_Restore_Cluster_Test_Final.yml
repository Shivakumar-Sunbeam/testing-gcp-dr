name: Cleanup_And_Restore_Cluster_Test_Final

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      clean_up_region:
        type: choice
        description: In which region would you like to create replicas
        options: 
        - us-west
        - us-central 
      rollback: 
        type: choice
        description: Would you like to clean resources created due to rollback ?
        options:
          - No
          - Yes

env:

########################### PROJECT DETAILS ################################
  
  gke_project_id: 'grand-thought-365806'
  vpc_name: 'thd-test-network'
  namespace: 'myapps'
############################################################################ 

############################### ZONE INFO ##################################
  zone_secondary: us-west1-a
  zone_primary: us-central1-b 
############################################################################

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PRIMARY CLUSTER INFO <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

########################### Primary DATABASE INFO ########################## 
  
  geodb_primary: db-us-central
  notifydb_primary: notifydb
  securitydb_primary: securitydb-dr
  serviceproviderdb_primary: serviceproviderdb-dr
  tresurydb_primary: tresurydb-dr
  workorderdb_primary: workorderdb-dr
  servicecatalogdb_primary: servicecatalogdb-dr

############################################################################ 

########################## Primary LOAD BALANCER INFO ###################### 

  primary_external_lb_backend_service_name: thd-dev-backend-svc2
  primary_external_lb_url_map: thd-global
  primary_internal_lb_backend_service_name: thd-dev-backend-svc1-internal
  primary_internal_lb_url_map: thd-dev-url-map-internal

############################################################################
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Secondary CLUSTER INFO <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

########################## Secondary LOAD BALANCER INFO ###################### 

  secondary_external_lb_backend_service_name: thd-dev-backend-svc2
  secondary_external_lb_url_map: test-lb
  secondary_internal_lb_backend_service_name: thd-dev-backend-svc2-internal
  secondary_internal_lb_url_map: thd-dev-url-map-internal

############################################################################ 

########################## Secondary DATABASE INFO ###########################

  geodb_secondary: db-us-west
  notifydb_secondary: notifydb-replica
  securitydb_secondary: securitydb-dr-replica
  serviceproviderdb_secondary: serviceproviderdb-dr-replica
  tresurydb_secondary: tresurydb-dr-replica
  workorderdb_secondary: workorderdb-dr-replica
  servicecatalogdb_secondary: servicecatalogdb-dr-replica

########################################################################### 

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>># 
     
jobs:

  Rollback_CleanUP_ON_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    if: inputs.clean_up_region == 'us-west' && inputs.rollback == 'true'
    steps:
      - name: "Cloning the repo to copy the deployments.csv containing the deployment name and replica count"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v0'
        with:
        # Please provide the workload_identity_provider & service_account
          workload_identity_provider: 'projects/13793097680/locations/global/workloadIdentityPools/mypool/providers/myprovider'
          service_account: 'my-test-service-account@grand-thought-365806.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'us-west' # Make sure you provide the cluster name and location
          location: 'us-west1-a'  
      - name: 'Use gcloud & kube CLI commands'
        run: |
          gcloud info
          gcloud version
          gcloud components install beta --quiet
          echo " -------> Scale Down Frontend & Backend Pods <-------------"
          while IFS=";" read -r dep rep
          do
            echo "-----> Decreasing replica count to 0 of deployment $dep ----->"
            kubectl scale --replicas=0 deployment/$dep -n $namespace
          done < <(cat scale-up-deployments-list.csv)

          echo "-----------> Scale Down Kafka , RabitMQ and other stateful services <--------"
          while IFS=";" read -r dep rep
          do
            echo "-----> Decreasing replica count to 0 of deployment $dep ----->"
            kubectl scale --replicas=0 deployment/$dep -n $namespace
          done < <(cat scale-down-deployments.csv)

          echo " ----------> Delete DB <-------------------------------- "
          gcloud sql instances patch $geodb_secondary --no-deletion-protection # disable deletion protection
          gcloud sql instances delete $geodb_secondary --quiet
          # gcloud sql instances patch $notifydb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $notifydb_secondary --quiet
          # gcloud sql instances patch $securitydb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $securitydb_secondary --quiet
          # gcloud sql instances patch $tresurydb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $tresurydb_secondary --quiet
          # gcloud sql instances patch $workorderdb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $workorderdb_secondary --quiet
          # gcloud sql instances patch $servicecatalogdb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $servicecatalogdb_secondary --quiet
          # gcloud sql instances patch $serviceproviderdb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $serviceproviderdb_secondary --quiet

          echo "--------------------> Create Replicas <----------------------------"

          gcloud beta services vpc-peerings update --service=servicenetworking.googleapis.com --ranges='db-us-west' --network='thd-test-network' --project="grand-thought-365806" --force
          gcloud sql instances create $geodb_secondary --master-instance-name=$geodb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet 
          # gcloud sql instances create $notifydb_secondary --master-instance-name=$notifydb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $securitydb_secondary --master-instance-name=$securitydb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $tresurydb_secondary --master-instance-name=$tresurydb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $workorderdb_secondary --master-instance-name=$workorderdb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $servicecatalogdb_secondary --master-instance-name=$servicecatalogdb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $serviceproviderdb_secondary --master-instance-name=$serviceproviderdb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet  
          echo "---------------> Updating the Service with new IP's of Replicas <----------------------"
          all_dbs_west=("db-us-west" "db-us-west" "db-us-west" "db-us-west" "db-us-west" "db-us-west" "db-us-west")
          all_svc_names=("postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service")
          for ((index=0;index<${#all_dbs_west[@]};index++))
          do
              db_ip=$(gcloud sql instances describe ${all_dbs_west[$index]} --format 'value(ipAddresses.ipAddress)' --project $gke_project_id)
              cp service-external.yml ${all_svc_names[$index]}.yml
              sed -i "s/svcname/${all_svc_names[$index]}/" "./${all_svc_names[$index]}.yml"
              sed -i "s/IP/$db_ip/" "./${all_svc_names[$index]}.yml"
              kubectl apply -f ./${all_svc_names[$index]}.yml -n $namespace
          done

          
  Rollback_CleanUP_ON_PRIMARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    if: inputs.clean_up_region == 'us-central' && inputs.rollback == 'true'
    steps:
      - name: "Clone the repo to copy the deployments.txt"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/13793097680/locations/global/workloadIdentityPools/mypool/providers/myprovider'
          service_account: 'my-test-service-account@grand-thought-365806.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'us-cluster'  # Make sure you provide the cluster name and location
          location: 'us-central1-c'
      - name: 'Use gcloud CLI'
        run: |
          gcloud info
          gcloud version
          gcloud components install beta --quiet
          echo " -------> Scale Down Frontend & Backend Deployments <-------------"
          while IFS=";" read -r dep rep
          do
            echo "-----> Decreasing replica count to 0 of deployment $dep ----->"
            kubectl scale --replicas=0 deployment/$dep -n $namespace
          done < <(cat scale-up-deployments-list.csv)

          echo "-----------> Scale Down Kafka , RabitMQ and Other Stateful Deployments <--------"
          while IFS=";" read -r dep rep
          do
            echo "-----> Decreasing replica count to 0 of deployment $dep ----->"
            kubectl scale --replicas=0 deployment/$dep -n $namespace
          done < <(cat scale-down-deployments.csv)

          echo " ----------> Delete DB <-------------------------------- "

          gcloud sql instances patch $geodb_primary --no-deletion-protection # disable deletion protection
          gcloud sql instances delete $geodb_primary --quiet
          # gcloud sql instances patch $notifydb_primary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $notifydb_primary --quiet
          # gcloud sql instances patch $securitydb_primary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $securitydb_primary --quiet
          # gcloud sql instances patch $tresurydb_primary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $tresurydb_primary --quiet
          # gcloud sql instances patch $workorderdb_primary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $workorderdb_primary --quiet
          # gcloud sql instances patch $servicecatalogdb_primary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $servicecatalogdb_primary --quiet
          # gcloud sql instances patch $serviceproviderdb_primary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $serviceproviderdb_primary --quiet

          echo "--------------------> Create Replicas <----------------------------"

          gcloud services vpc-peerings update --service=servicenetworking.googleapis.com --ranges='db-subnet' --network='thd-test-network' --project="grand-thought-365806" --force
          gcloud sql instances create $geodb_primary --master-instance-name=$geodb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet 
          # gcloud sql instances create $notifydb_primary --master-instance-name=$notifydb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $securitydb_primary --master-instance-name=$securitydb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $tresurydb_primary --master-instance-name=$tresurydb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $workorderdb_primary --master-instance-name=$workorderdb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $servicecatalogdb_primary --master-instance-name=$servicecatalogdb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $serviceproviderdb_primary --master-instance-name=$serviceproviderdb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet 
          echo "---------------> Updating the Service's with new IP's of Replicas <----------------------"
          all_dbs_central=("db-us-central" "db-us-central" "db-us-central" "db-us-central" "db-us-central" "db-us-central" "db-us-central")
          all_svc_names=("postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service")
          for ((index=0;index<${#all_dbs_central[@]};index++))
          do
              db_ip=$(gcloud sql instances describe ${all_dbs_central[$index]} --format 'value(ipAddresses.ipAddress)' --project $gke_project_id)
              cp service-external.yml ${all_svc_names[$index]}.yml
              sed -i "s/svcname/${all_svc_names[$index]}/" "./${all_svc_names[$index]}.yml"
              sed -i "s/IP/$db_ip/" "./${all_svc_names[$index]}.yml"
              kubectl apply -f ./${all_svc_names[$index]}.yml -n $namespace
          done
          
  SCALE_DOWN_DEPLOYMENTS_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    if: inputs.clean_up_region == 'us-west' && inputs.rollback == 'false'
    steps:
      - name: "Cloning the repo to copy the deployments.csv containing the deployment name and replica count"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v0'
        with:
        # Please provide the workload_identity_provider & service_account
          workload_identity_provider: 'projects/13793097680/locations/global/workloadIdentityPools/mypool/providers/myprovider'
          service_account: 'my-test-service-account@grand-thought-365806.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'us-west' # Make sure you provide the cluster name and location
          location: 'us-west1-a'  
      - name: "Scaling Deployemnts on primary cluster"
        run: |
          while IFS=";" read -r dep rep
          do
            echo "-----> Decreasing replica count to 0 of deployment $dep ----->"
            kubectl scale --replicas=0 deployment/$dep -n $namespace
          done < <(cat scale-up-deployments-list.csv)
 
  SCALE_DOWN_DEPLOYMENTS_PRIMARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    if: inputs.clean_up_region == 'us-central' && inputs.rollback == 'false'
    steps:
      - name: "Clone the repo to copy the deployments.txt"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v0'
        with:
        # Please provide the workload_identity_provider & service_account
          workload_identity_provider: 'projects/13793097680/locations/global/workloadIdentityPools/mypool/providers/myprovider'
          service_account: 'my-test-service-account@grand-thought-365806.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'us-cluster'  # Make sure you provide the cluster name and location
          location: 'us-central1-c'
      - name: "Scaling Deployemnts on primary cluster"
        run: |
          while IFS=";" read -r dep rep
          do
            echo "-----> Decreasing replica count to 0 of deployment $dep ----->"
            kubectl scale --replicas=0 deployment/$dep -n $namespace
          done < <(cat scale-up-deployments-list.csv)

  DB_DELETE_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [SCALE_DOWN_DEPLOYMENTS_SECONDARY]
    if: inputs.clean_up_region == 'us-west' && inputs.rollback == 'false'
    steps:
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/13793097680/locations/global/workloadIdentityPools/mypool/providers/myprovider'
          service_account: 'my-test-service-account@grand-thought-365806.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Use gcloud CLI'
        run: |
          gcloud info
          gcloud version
          gcloud sql instances patch $geodb_secondary --no-deletion-protection # disable deletion protection
          gcloud sql instances delete $geodb_secondary --quiet
          # gcloud sql instances patch $notifydb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $notifydb_secondary --quiet
          # gcloud sql instances patch $securitydb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $securitydb_secondary --quiet
          # gcloud sql instances patch $tresurydb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $tresurydb_secondary --quiet
          # gcloud sql instances patch $workorderdb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $workorderdb_secondary --quiet
          # gcloud sql instances patch $servicecatalogdb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $servicecatalogdb_secondary --quiet
          # gcloud sql instances patch $serviceproviderdb_secondary --no-deletion-protection # disable deletion protection
          # gcloud sql instances delete $serviceproviderdb_secondary --quiet
   
  REPLICA_CREATE_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    needs: [DB_DELETE_SECONDARY]
    runs-on: ubuntu-latest
    if: inputs.clean_up_region == 'us-west' && inputs.rollback == 'false'
    steps:
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/13793097680/locations/global/workloadIdentityPools/mypool/providers/myprovider'
          service_account: 'my-test-service-account@grand-thought-365806.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Use gcloud CLI'
        run: |
          gcloud info
          gcloud version
          gcloud components install beta --quiet
          gcloud beta services vpc-peerings update --service=servicenetworking.googleapis.com --ranges='db-us-west' --network='thd-test-network' --project="grand-thought-365806" --force
          gcloud sql instances create $geodb_secondary --master-instance-name=$geodb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet 
          # gcloud sql instances create $notifydb_secondary --master-instance-name=$notifydb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $securitydb_secondary --master-instance-name=$securitydb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $tresurydb_secondary --master-instance-name=$tresurydb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $workorderdb_secondary --master-instance-name=$workorderdb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $servicecatalogdb_secondary --master-instance-name=$servicecatalogdb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $serviceproviderdb_secondary --master-instance-name=$serviceproviderdb_primary --zone=$zone_secondary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet  
        
  DB_DELETE_PRIMARY:
      permissions:
        contents: 'read'
        id-token: 'write'
      runs-on: ubuntu-latest
      needs: [SCALE_DOWN_DEPLOYMENTS_PRIMARY]
      if: inputs.clean_up_region == 'us-central' && inputs.rollback == 'false'
      steps:
        - name: Set up gcloud Cloud SDK environment
          uses: 'google-github-actions/auth@v1'
          with:
            workload_identity_provider: 'projects/13793097680/locations/global/workloadIdentityPools/mypool/providers/myprovider'
            service_account: 'my-test-service-account@grand-thought-365806.iam.gserviceaccount.com'
        - name: 'Set up Cloud SDK'
          uses: 'google-github-actions/setup-gcloud@v1'
        - name: 'Use gcloud CLI'
          run: |

              gcloud sql instances patch $geodb_primary --no-deletion-protection # disable deletion protection
              gcloud sql instances delete $geodb_primary --quiet
              # gcloud sql instances patch $notifydb_primary --no-deletion-protection # disable deletion protection
              # gcloud sql instances delete $notifydb_primary --quiet
              # gcloud sql instances patch $securitydb_primary --no-deletion-protection # disable deletion protection
              # gcloud sql instances delete $securitydb_primary --quiet
              # gcloud sql instances patch $tresurydb_primary --no-deletion-protection # disable deletion protection
              # gcloud sql instances delete $tresurydb_primary --quiet
              # gcloud sql instances patch $workorderdb_primary --no-deletion-protection # disable deletion protection
              # gcloud sql instances delete $workorderdb_primary --quiet
              # gcloud sql instances patch $servicecatalogdb_primary --no-deletion-protection # disable deletion protection
              # gcloud sql instances delete $servicecatalogdb_primary --quiet
              # gcloud sql instances patch $serviceproviderdb_primary --no-deletion-protection # disable deletion protection
              # gcloud sql instances delete $serviceproviderdb_primary --quiet
            
  REPLICA_CREATE_PRIMARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [DB_DELETE_PRIMARY]
    if: inputs.clean_up_region == 'us-central' && inputs.rollback == 'false'
    steps:
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/13793097680/locations/global/workloadIdentityPools/mypool/providers/myprovider'
          service_account: 'my-test-service-account@grand-thought-365806.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Use gcloud CLI'
        run: |
          gcloud info
          gcloud version
          gcloud components install beta --quiet
          gcloud services vpc-peerings update --service=servicenetworking.googleapis.com --ranges='db-subnet' --network='thd-test-network' --project="grand-thought-365806" --force
          gcloud sql instances create $geodb_primary --master-instance-name=$geodb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet 
          # gcloud sql instances create $notifydb_primary --master-instance-name=$notifydb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $securitydb_primary --master-instance-name=$securitydb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $tresurydb_primary --master-instance-name=$tresurydb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $workorderdb_primary --master-instance-name=$workorderdb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $servicecatalogdb_primary --master-instance-name=$servicecatalogdb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet &
          # gcloud sql instances create $serviceproviderdb_primary --master-instance-name=$serviceproviderdb_secondary --zone=$zone_primary --replica-type=READ --replication=synchronous --deletion-protection --no-assign-ip --network="projects/$gke_project_id/global/networks/$vpc_name" --quiet 
        
  UPDATE_POSTGRESQL_IP_PRIMARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [REPLICA_CREATE_PRIMARY]
    if: inputs.clean_up_region == 'us-central' && inputs.rollback == 'false'
    steps:
      - name: "Clone the repo to copy the service-external.yml"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/13793097680/locations/global/workloadIdentityPools/mypool/providers/myprovider'
          service_account: 'my-test-service-account@grand-thought-365806.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'us-cluster'  # Make sure you provide the cluster name and location
          location: 'us-central1-c'
      - name: 'Use gcloud CLI'
        run: |
            gcloud info
            gcloud version

            
            all_dbs_central=("db-us-central" "db-us-central" "db-us-central" "db-us-central" "db-us-central" "db-us-central" "db-us-central")
            all_svc_names=("postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service")
            for ((index=0;index<${#all_dbs_central[@]};index++))
            do
                db_ip=$(gcloud sql instances describe ${all_dbs_central[$index]} --format 'value(ipAddresses.ipAddress)' --project $gke_project_id)
                cp service-external.yml ${all_svc_names[$index]}.yml
                sed -i "s/svcname/${all_svc_names[$index]}/" "./${all_svc_names[$index]}.yml"
                sed -i "s/IP/$db_ip/" "./${all_svc_names[$index]}.yml"
                kubectl apply -f ./${all_svc_names[$index]}.yml -n $namespace
            done

  UPDATE_POSTGRESQL_IP_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [REPLICA_CREATE_SECONDARY]
    if: inputs.clean_up_region == 'us-west' && inputs.rollback == 'false'
    steps:
      - name: "Clone the repo to copy the service-external.yml"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/13793097680/locations/global/workloadIdentityPools/mypool/providers/myprovider'
          service_account: 'my-test-service-account@grand-thought-365806.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'us-west' # Make sure you provide the cluster name and location
          location: 'us-west1-a'  
      - name: 'Use gcloud CLI'
        run: |
            gcloud info
            gcloud version
            all_dbs_west=("db-us-west" "db-us-west" "db-us-west" "db-us-west" "db-us-west" "db-us-west" "db-us-west")
            all_svc_names=("postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service" "postgres-service")
            for ((index=0;index<${#all_dbs_west[@]};index++))
            do
                db_ip=$(gcloud sql instances describe ${all_dbs_west[$index]} --format 'value(ipAddresses.ipAddress)' --project $gke_project_id)
                cp service-external.yml ${all_svc_names[$index]}.yml
                sed -i "s/svcname/${all_svc_names[$index]}/" "./${all_svc_names[$index]}.yml"
                sed -i "s/IP/$db_ip/" "./${all_svc_names[$index]}.yml"
                kubectl apply -f ./${all_svc_names[$index]}.yml -n $namespace
            done
